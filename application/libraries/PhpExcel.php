<?php
defined('BASEPATH') or exit('No direct script access allowed');
require(dirname(APPPATH) . '/vendor/autoload.php');

use PhpOffice\PhpSpreadsheet\Helper\Sample;
use PhpOffice\PhpSpreadsheet\IOFactory;
use PhpOffice\PhpSpreadsheet\Spreadsheet;
use PhpOffice\PhpSpreadsheet\Writer\Xlsx;

class PhpExcel
{
    protected $ci;

    public function __construct()
    {
        $this->ci = &get_instance();
    }

    public function excel()
    {
        return new Spreadsheet();
    }

    public function standardExport($docProperty, $headerData, $bodyKey, $bodyData, $output = '')
    {
        $filename = $docProperty['filename'];
        $spreadsheet = new Spreadsheet();
        // Set document properties
        $spreadsheet->getProperties()->setCreator('RelawanBJP')
            ->setLastModifiedBy('RelawanBJP')
            ->setTitle('RelawanBJP-document ')
            ->setSubject('RelawanBJP-document')
            ->setDescription('RelawanBJP Document Generated By System.')
            ->setKeywords('Document RelawanBJP ')
            ->setCategory('RelawanBJP Document');

        $spreadsheet->setActiveSheetIndex(0);
        $spreadsheet->getActiveSheet()
            ->fromArray($headerData, NULL, 'A1');

        $baris = 2;
        $kolom = 1;


        // $bodyData[0]['id']

        for ($q = 0; $q < count($bodyData); $q++) {
            for ($i = 0; $i < count($bodyKey); $i++) {

                $spreadsheet->getActiveSheet()->setCellValueByColumnAndRow($kolom, $baris, $bodyData[$q][$bodyKey[$i]]);
                $kolom++;
            }
            $baris++;
            $kolom = 1;
        }


        $spreadsheet->setActiveSheetIndex(0); // set active sheet to first sheet, so when we open this file it will show first sheet
        $spreadsheet->getActiveSheet()->setTitle('Sheet1');
        // Set active sheet index to the first sheet, so Excel opens this as the first sheet
        $spreadsheet->setActiveSheetIndex(0);
        for ($i = 'A'; $i <= $spreadsheet->getActiveSheet()->getHighestColumn(); $i++) {
            $spreadsheet->getActiveSheet()->getColumnDimension($i)->setAutoSize(true);
        }
        // Redirect output to a clientâ€™s web browser (Xlsx)
        header('Content-Type: application/vnd.openxmlformats-officedocument.spreadsheetml.sheet');
        header('Content-Disposition: attachment; filename="' . $filename . '"');
        header('Cache-Control: max-age=0');
        // If you're serving to IE 9, then the following may be needed
        header('Cache-Control: max-age=1');

        // If you're serving to IE over SSL, then the following may be needed
        header('Expires: Mon, 26 Jul 1997 05:00:00 GMT'); // Date in the past
        header('Last-Modified: ' . gmdate('D, d M Y H:i:s') . ' GMT'); // always modified
        header('Cache-Control: cache, must-revalidate'); // HTTP/1.1
        header('Pragma: public'); // HTTP/1.0

        $writer = IOFactory::createWriter($spreadsheet, 'Xlsx');
        ob_end_clean();
        if ($output == 'file') {
            $path = dirname(APPPATH) . '/AppDoc/media/';
            $file = uniqid(true) . '_' . $filename;
            $writer->save($path . $file);
            return  $file;
        } else {
            $writer->save('php://output');
            exit;
        }
    }


    public function exportGroupByRelawan($head, $dataBody, $filename)
    {
    }
}

/* End of file PhpExcel.php */
/* Location: ./application/libraries/PhpExcel.php */
